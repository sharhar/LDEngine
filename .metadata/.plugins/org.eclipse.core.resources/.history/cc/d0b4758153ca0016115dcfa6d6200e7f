package server;

import java.util.HashMap;

import net.ddns.sharhar.tcp.TcpServer;
import net.ddns.sharhar.tcp.TcpServer.TcpServerClient;
import net.ddns.sharhar.tcp.TcpServerCallback;
import utils.FileUtils;

public class Server implements TcpServerCallback{
	public static HashMap<String, String> props;
	public static TcpServer connectionServer;
	public static GameServer[] gameServers;
	public static int port;
	public static int gamePortsStart;
	public static int gamePortsNum;
	public static int gamePortsEnd;
	
	public static void main(String[] args) {
		new Server();
	}
	
	public Server() {
		String conf = FileUtils.loadAsString("server.conf");
		
		props = new HashMap<String, String>();
		for(String line:conf.split("\n")) {
			if(!line.equals("")) {
				String[] temp = line.split(" ");
				props.put(temp[0].toUpperCase(), temp[1]);
			}
		}
		
		port = Integer.parseInt(props.get("PORT"));
		String[] gps = props.get("GAMEPORTS").split("-");
		gamePortsStart = Integer.parseInt(gps[0]);
		gamePortsEnd = Integer.parseInt(gps[1]) + 1;
		gamePortsNum = gamePortsEnd - gamePortsStart;
		
		gameServers = new GameServer[gamePortsNum];
		for(int i = 0;i < gamePortsNum;i++) {
			gameServers[i] = new GameServer(i + gamePortsStart);
		}
		
		connectionServer = new TcpServer(port, this);
		
		connectionServer.start();
	}
	
	public void receivedData(int id, TcpServerClient client, String data) {
		
	}

	public void connected(int id, TcpServerClient client) {
		String ip = client.socket.getInetAddress().getHostAddress();
		int port = client.socket.getPort();
		
		System.out.println(ip + ":" + port + " connected as player " + id);
		
		String list = "";
		for(GameServer g:gameServers) {
			list += g.name + "/" + g.port + ",";
		}
		
		client.sendData(list);
	}
	
	public void disconnected(int id, TcpServerClient client) {
		System.out.println("player " + id + " disconnected");
	}
}
