package game;

import java.awt.Graphics;

import engine.input.Keyboard;
import engine.rendering.Renderer;
import engine.utils.math.Matrix4f;

public class Game {
	public final static String TITLE = "LDEngine";
	public final static int WIDTH = 800;
	public final static int HEIGHT = 600;
	
	public static Matrix4f projection;
	
	public static long startTime;
	public static int frames;
	public static int FPS;
	
	public static boolean printFPS = false;
	
	public static long deltaStart;
	public static float deltaTime;

	public static void init() {
		projection = new Matrix4f();
		
		float r = 800;
		float l = 0;
		float t = 600;
		float b = 0;
		float f = 1;
		float n = -1;
		
		projection.data[0][0] = 2.0f/(r - l);
		projection.data[1][1] = 2.0f/(t - b);
		projection.data[2][2] = -2.0f/(f - n);
		
		projection.data[0][3] = -(r + l)/(r - l);
		projection.data[1][3] = -(t + b)/(t - b);
		projection.data[2][3] = -(f + n)/(f - n);
		
		Renderer.init(WIDTH, HEIGHT, 8, projection);
		Renderer.setClearColor(0xff000000);
		
		GameController.init();
		
		deltaTime = 0;
		deltaStart = System.nanoTime();
		startTime = System.currentTimeMillis();
	}
	
	public static void render(Graphics g) {
		Keyboard.tick();
		
		Renderer.clear();
		
		GameController.render();
		
		Renderer.drawBuffer(g);
		
		GameController.postRender(g);
		
		frames++;
		if(System.currentTimeMillis() - startTime >= 1000) {
			FPS = frames;
			frames = 0;
			if(printFPS) {
				System.out.println("FPS: " + FPS);
			}
			startTime = System.currentTimeMillis();
		}
		
		if(deltaTime < 1.0f/60.0f) {			
			try {
				Thread.sleep((long) ((1.0f/60.0f - deltaTime)*1000));
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		deltaTime = (float)((System.nanoTime() - deltaStart)/1000000000.0);
		deltaStart = System.nanoTime();
	}
}
